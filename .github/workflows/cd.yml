name: Continuous Deployment

on:
  push:
    branches:
      - release

jobs:
  deployment_cluster:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4  

      - name: Debug Directory Structure
        run: ls -lah

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.USER_NAME }}
          password: ${{ secrets.PASSWORD }}

      - name: Pull Docker Image
        run: docker pull sadik8143/spc:1.0

      - name: Run Trivy Scan
        id: trivy_scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'sadik8143/spc:1.0'
          format: 'json'
          output: trivy-results.json
          exit-code: '1'
          ignore-unfixed: false
          severity: 'HIGH,CRITICAL'
          continue-on-error: true

      - name: Upload Trivy Scan Results
        if: steps.trivy_scan.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.json

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}",
                  "clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}",
                  "subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}",
                  "tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Set Terraform Environment Variables
        run: |
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v2  

      - name: Initialize Terraform
        run: terraform init
        working-directory: infra

      - name: Validate Terraform
        run: terraform validate
        working-directory: infra

      - name: Apply Terraform Changes
        run: terraform apply -var-file="default.tfvars" -auto-approve
        working-directory: infra

      - name: Install Helm
        uses: azure/setup-helm@v4.3.0
        with:
          version: latest 
        id: install

      - name: Verify Helm Installation
        run: helm version

      - name: Deploy Application using Helm
        run: |
          
          helm upgrade --install spc-release ./spc-chart \
            --namespace default



            